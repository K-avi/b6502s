todo : 

    - debug instructions (I'd need proper stop / start exec and I/O handling and stuff)
      in order to do that I'll implement the ncurses interface first to make debugging 
      more pleasant (and bc I wanna do it :O  )

    - in order to make the simulator cooler and better I'll implement an NCURSES 
      interface to navigate it. This is gonna take a while tbh but it makes the 
      project much more interresting. 
    
    - implement proper error handling
    - cycle accuracy (handle page crossing and so on)
    - implement undocummented instructions (maybe?)


objectives : 

    Implementing the CPU :
        - fully functionnal VM that can read 6502 asm 
        - use BASIC as a test program and see if it runs (which means implementing I/O too)

    Turning the "VM" int o a more realistic,"board simulator : 

        - Simulate the BUS, RAM, ROM, I/O devices independantly 
        - add MMU for memory mapping 
    
    Make the simulator modular : 
        - allow for custom memory mapping 
        - scripts to specify which/how each device is mapped 

        -> end goal is to be able to implement simulators for the following boards : 
            - NES
            - C64
            - Apple II
            - Acorn Atom 
            By ONLY modifying the script (you can think of it as some kind of ldscript) of the 
            simulator